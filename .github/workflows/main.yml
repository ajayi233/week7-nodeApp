name: Deploy to Amazon ECR
# Trigger on push to main branch
on:
  push:
    branches: ["main"]
  pull_request:
    branches: [main]
env:
  AWS_REGION: us-east-1 # Replace with your preferred AWS region
  AWS_ECS_REGION: eu-west-1 
  ECR_PUBLIC_REGISTRY: public.ecr.aws/i1t0m4k8
  ECR_REPOSITORY: week7repo # Replace with your ECR repository name
  IMAGE_TAG: danielajayi_week7nodeapp
  ECS_CLUSTER: MyAppCluster
  ECS_SERVICE: MyAppALB-Service
  ECS_TASK_FAMILY: MyAppALB-Task
  CODEDEPLOY_APPLICATION: MyAppALB-BlueGreenApp
  CODEDEPLOY_DEPLOYMENT_GROUP: MyAppALB-BlueGreenDG
  CONTAINER_DEFINITION: MyAppALB-Container

jobs:
  deploy:
    name: Deploy to ECR
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon Public ECR
        run: |
          aws ecr-public get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin public.ecr.aws

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_PUBLIC_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_PUBLIC_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_PUBLIC_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      # - name: Generate task definition JSON
      #   run: |
      #     # Create a task definition JSON file with the new image
      #     cat <<EOF > task-definition.json
      #     {
      #       "family": "${{ env.ECS_TASK_FAMILY }}",
      #       "cpu": "512",
      #       "memory": "1024",
      #       "networkMode": "awsvpc",
      #       "requiresCompatibilities": ["FARGATE"],
      #       "taskRoleArn": "arn:aws:iam::180294215334:role/MyAppALB-ECSTaskRole",
      #       "executionRoleArn": "arn:aws:iam::180294215334:role/MyAppALB-ECSExecutionRole",
      #       "containerDefinitions": [
      #         {
      #           "name": "${{ env.CONTAINER_DEFINITION }}",
      #           "image": "public.ecr.aws/p6l0u1j8/week6app:danielajayi_week6nodeapp",
      #           "essential": true,
      #           "portMappings": [
                #   {
                #     "containerPort": 5000,
                #     "hostPort": 5000,
                #     "protocol": "tcp"
                #   }
                # ],
                # "logConfiguration": {
                #   "logDriver": "awslogs",
                #   "options": {
                #     "awslogs-group": "/ecs/MyAppALB-Logs",
                #     "awslogs-region": "${{ env.AWS_ECS_REGION }}",
                #     "awslogs-stream-prefix": "ecs"
                #   }
                # },
                # "environment": [
                #     {"name": "DATABASE_PORT", "value": "5432"},
                #     {"name": "AWS_BUCKET_NAME", "value": "myapp-bucket-180294215334"},
                #     {"name": "S3_BUCKET_URL", "value": "https://myapp-bucket-180294215334.s3.amazonaws.com"}
                # ],
                # "secrets": [
      #               {"name": "AWS_ACCESS_KEY_ID", "valueFrom": "arn:aws:ssm:eu-west-1:180294215334:parameter/access_key_id"},
      #               {"name": "AWS_SECRET_ACCESS_KEY", "valueFrom": "arn:aws:ssm:eu-west-1:180294215334:parameter/secret_access_key"},
      #               {"name": "DATABASE_HOST", "valueFrom": "arn:aws:ssm:eu-west-1:180294215334:parameter/host"},
      #               {"name": "DATABASE_NAME", "valueFrom": "arn:aws:ssm:eu-west-1:180294215334:parameter/name"},
      #               {"name": "DATABASE_USER", "valueFrom": "arn:aws:ssm:eu-west-1:180294215334:parameter/user"},
      #               {"name": "DATABASE_PASSWORD", "valueFrom": "arn:aws:ssm:eu-west-1:180294215334:parameter/password"}
      #           ]
      #         }
      #       ]
      #     }
      #     EOF

      # - name: Register new task definition
      #   run: |
      #     # Register the new task definition and capture the revision number
      #     TASK_DEFINITION_ARN=$(aws ecs register-task-definition --cli-input-json file://task-definition.json --region ${{ env.AWS_ECS_REGION }} --query 'taskDefinition.taskDefinitionArn' --output text)
      #     echo "Task Definition ARN: $TASK_DEFINITION_ARN"
      #     echo "task_definition_arn=$TASK_DEFINITION_ARN" >> $GITHUB_ENV

      # - name: Generate appspec.json for CodeDeploy
      #   run: |
      #     # Create an appspec.json file for CodeDeploy
      #     cat <<EOF > appspec.json
      #     {
      #       "version": 0.0,
      #       "Resources": [
      #         {
      #           "TargetService": {
      #             "Type": "AWS::ECS::Service",
      #             "Properties": {
      #               "TaskDefinition": "${{ env.task_definition_arn }}",
      #               "LoadBalancerInfo": {
      #                 "ContainerName": "${{ env.CONTAINER_DEFINITION }}",
      #                 "ContainerPort": 5000
      #               }
      #             }
      #           }
      #         }
      #       ]
      #     }
      #     EOF

      # - name: Install jq
      #   run: sudo apt-get install -y jq

      # - name: Trigger CodeDeploy deployment
      #   run: |
      #     # Read appspec.json and escape the content properly
      #     APPSPEC_CONTENT=$(cat appspec.json | jq -c -r @json)

      #     # Escape any inner quotes so that it's valid JSON for AWS
      #     ESCAPED_APPSPEC_CONTENT=$(echo $APPSPEC_CONTENT | sed 's/"/\\"/g')

      #     # Create a deployment with the appspec content as a string
      #     DEPLOYMENT_ID=$(aws deploy create-deployment \
      #       --application-name ${{ env.CODEDEPLOY_APPLICATION }} \
      #       --deployment-group-name ${{ env.CODEDEPLOY_DEPLOYMENT_GROUP }} \
      #       --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
      #       --description "Deployment triggered by GitHub Actions" \
      #       --revision "{\"revisionType\":\"AppSpecContent\",\"appSpecContent\":{\"content\":\"$ESCAPED_APPSPEC_CONTENT\"}}" \
      #       --region ${{ env.AWS_ECS_REGION }} \
      #       --query 'deploymentId' --output text)

      #     echo "Deployment ID: $DEPLOYMENT_ID"

      #     # Wait for the deployment to complete
      #     aws deploy get-deployment  --deployment-id $DEPLOYMENT_ID --region ${{ env.AWS_ECS_REGION }}
